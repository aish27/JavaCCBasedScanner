run:
IDENTIFIER token: Two
IDENTIFIER token: here
SPECIAL SYMBOL : .
IDENTIFIER token: Hello
IDENTIFIER token: world
IDENTIFIER token: Abstract
RESERVEDWORD ABSTRACT token:abstract
IDENTIFIER token: ABSTRACT
IDENTIFIER token: aBsTrAcT
IDENTIFIER token: What_is_that
SPECIAL SYMBOL : ?
CHAR token:'x'
CHAR token:'A'
CHAR token:'\'
CHAR token:'b'
STRING token:"Hello, world."
STRING token:"It's Friday!"
STRING token:""
SPECIAL SYMBOL : +
SPECIAL SYMBOL : -
SPECIAL SYMBOL : *
SPECIAL SYMBOL : /
SPECIAL SYMBOL : :
SPECIAL SYMBOL : =
SPECIAL SYMBOL : .
SPECIAL SYMBOL : ,
SPECIAL SYMBOL : ;
SPECIAL SYMBOL : :
SPECIAL SYMBOL : =
SPECIAL SYMBOL : <
SPECIAL SYMBOL : >
SPECIAL SYMBOL : <
SPECIAL SYMBOL : <=
SPECIAL SYMBOL : >=
SPECIAL SYMBOL : >
SPECIAL SYMBOL : (
SPECIAL SYMBOL : )
SPECIAL SYMBOL : [
SPECIAL SYMBOL : ]
SPECIAL SYMBOL : {
SPECIAL SYMBOL : }
SPECIAL SYMBOL : }
SPECIAL SYMBOL : ^
SPECIAL SYMBOL : .
SPECIAL SYMBOL : .
SPECIAL SYMBOL : <<=
SPECIAL SYMBOL : >>=
SPECIAL SYMBOL : :
SPECIAL SYMBOL : =
SPECIAL SYMBOL : <
SPECIAL SYMBOL : >=
SPECIAL SYMBOL : <=
SPECIAL SYMBOL : =
SPECIAL SYMBOL : >>=
SPECIAL SYMBOL : ==
INTEGER token: 0
INTEGER token: 1
REALNUMBER: 12.0
INTEGER token: 00000000000000000012
REALNUMBER: .12
REALNUMBER: 1.
REALNUMBER: .2
INTEGER token: 012
INTEGER token: 0x12
INTEGER token: 0xAb
INTEGER token: 0x0E12
REALNUMBER: 12.
REALNUMBER: 0.12
REALNUMBER: .12
REALNUMBER: 1.2e+2
REALNUMBER: 12e+2
REALNUMBER: 12e2
REALNUMBER: 0e2
REALNUMBER: 12e-2
REALNUMBER: 12e-5
REALNUMBER: .12e+2
REALNUMBER: 12.e+2
REALNUMBER: 12e-1
REALNUMBER: 12e12
REALNUMBER: .31415926
REALNUMBER: 3.1415926
REALNUMBER: 0.00031415926E4
REALNUMBER: 0.00031415926e+00004
REALNUMBER: 31415.926e-4
REALNUMBER: 3141592600000000000000000000000e-30
RESERVEDWORD PUBLIC token:public
IDENTIFIER token: ICodeNode
IDENTIFIER token: parse
SPECIAL SYMBOL : (
IDENTIFIER token: Token
IDENTIFIER token: token
SPECIAL SYMBOL : )
RESERVEDWORD THROWS token:throws
IDENTIFIER token: Exception
SPECIAL SYMBOL : {
IDENTIFIER token: token
SPECIAL SYMBOL : =
IDENTIFIER token: nextToken
SPECIAL SYMBOL : (
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: loopNode
SPECIAL SYMBOL : =
IDENTIFIER token: ICodeFactory
SPECIAL SYMBOL : .
IDENTIFIER token: createICodeNode
SPECIAL SYMBOL : (
IDENTIFIER token: LOOP
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: testNode
SPECIAL SYMBOL : =
IDENTIFIER token: ICodeFactory
SPECIAL SYMBOL : .
IDENTIFIER token: createICodeNode
SPECIAL SYMBOL : (
IDENTIFIER token: TEST
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: StatementParser
IDENTIFIER token: statementParser
SPECIAL SYMBOL : =
RESERVEDWORD NEW token:new
IDENTIFIER token: StatementParser
SPECIAL SYMBOL : (
RESERVEDWORD THIS token:this
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: statementParser
SPECIAL SYMBOL : .
IDENTIFIER token: parseList
SPECIAL SYMBOL : (
IDENTIFIER token: token
SPECIAL SYMBOL : ,
IDENTIFIER token: loopNode
SPECIAL SYMBOL : ,
IDENTIFIER token: UNTIL
SPECIAL SYMBOL : ,
IDENTIFIER token: MISSING_UNTIL
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: token
SPECIAL SYMBOL : =
IDENTIFIER token: currentToken
SPECIAL SYMBOL : (
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: ExpressionParser
IDENTIFIER token: expressionParser
SPECIAL SYMBOL : =
RESERVEDWORD NEW token:new
IDENTIFIER token: ExpressionParser
SPECIAL SYMBOL : (
RESERVEDWORD THIS token:this
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: ICodeNode
IDENTIFIER token: exprNode
SPECIAL SYMBOL : =
IDENTIFIER token: expressionParser
SPECIAL SYMBOL : .
IDENTIFIER token: parse
SPECIAL SYMBOL : (
IDENTIFIER token: token
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: testNode
SPECIAL SYMBOL : .
IDENTIFIER token: addChild
SPECIAL SYMBOL : (
IDENTIFIER token: exprNode
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: loopNode
SPECIAL SYMBOL : .
IDENTIFIER token: addChild
SPECIAL SYMBOL : (
IDENTIFIER token: testNode
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
IDENTIFIER token: TypeSpec
IDENTIFIER token: exprType
SPECIAL SYMBOL : =
IDENTIFIER token: exprNode
SPECIAL SYMBOL : !=
IDENTIFIER token: null
SPECIAL SYMBOL : ?
IDENTIFIER token: exprNode
SPECIAL SYMBOL : .
IDENTIFIER token: getTypeSpec
SPECIAL SYMBOL : (
SPECIAL SYMBOL : )
SPECIAL SYMBOL : :
IDENTIFIER token: Predefined
SPECIAL SYMBOL : .
IDENTIFIER token: undefinedType
SPECIAL SYMBOL : ;
RESERVEDWORD IF token:if
SPECIAL SYMBOL : (
SPECIAL SYMBOL : !
IDENTIFIER token: TypeChecker
SPECIAL SYMBOL : .
IDENTIFIER token: isBoolean
SPECIAL SYMBOL : (
IDENTIFIER token: exprType
SPECIAL SYMBOL : )
SPECIAL SYMBOL : )
SPECIAL SYMBOL : {
IDENTIFIER token: errorHandler
SPECIAL SYMBOL : .
IDENTIFIER token: flag
SPECIAL SYMBOL : (
IDENTIFIER token: token
SPECIAL SYMBOL : ,
IDENTIFIER token: INCOMPATIBLE_TYPES
SPECIAL SYMBOL : ,
RESERVEDWORD THIS token:this
SPECIAL SYMBOL : )
SPECIAL SYMBOL : ;
SPECIAL SYMBOL : }
RESERVEDWORD RETURN token:return
IDENTIFIER token: loopNode
SPECIAL SYMBOL : ;
SPECIAL SYMBOL : }
BUILD SUCCESSFUL (total time: 0 seconds)
