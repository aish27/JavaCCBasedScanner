

options {
    BUILD_PARSER=false;
    IGNORE_CASE=true;
    DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(HelloWorld)
    public class HelloWorld {}
PARSER_END(HelloWorld)

TOKEN_MGR_DECLS : {
    public static void main(String[] args)
    {
        java.io.StringReader sr = new java.io.StringReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(sr);
        HelloWorldTokenManager mgr = new HelloWorldTokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }
}

SKIP : {
   <IGNORE : [" ", ","]>
}

TOKEN : {

    <ABSTRACT :"abstract"> 
{ debugStream.println("ABSTRACT token:" + matchedToken.image  ); }
 |<DEFAULTKEYWORD :"default"> 
{ debugStream.println("DEFAULT token:" + matchedToken.image  ); }
 |<GOTO :"goto"> 
{ debugStream.println("GOTO token:" + matchedToken.image  ); }
 |<PACKAGE :"package"> 
{ debugStream.println("PACKAGE token:" + matchedToken.image  ); }
 |<SYNCHRONIZED :"synchronized"> 
{ debugStream.println("SYNCHRONIZED token:" + matchedToken.image  ); }
 |<ASSERT :"assert"> 
{ debugStream.println("ASSERT token:" + matchedToken.image  ); }
 |<DO :"do"> 
{ debugStream.println("DO token:" + matchedToken.image  ); }
 |<IF :"if"> 
{ debugStream.println("IF token:" + matchedToken.image  ); }
 |<PRIVATE :"private"> 
{ debugStream.println("PRIVATE token:" + matchedToken.image  ); }
 |<THIS :"this"> 
{ debugStream.println("THIS token:" + matchedToken.image  ); }
 |<BOOLEAN :"boolean"> 
{ debugStream.println("BOOLEAN token:" + matchedToken.image  ); }
 |<DOUBLE :"double"> 
{ debugStream.println("DOUBLE token:" + matchedToken.image  ); }
 |<IMPLEMENTS :"implements"> 
{ debugStream.println("IMPLEMENTS token:" + matchedToken.image  ); }
 |<PROTECTED :"protected"> 
{ debugStream.println("PROTECTED token:" + matchedToken.image  ); }
 |<THROW :"throw"> 
{ debugStream.println("THROW token:" + matchedToken.image  ); }
 |<BREAK :"break"> 
{ debugStream.println("BREAK token:" + matchedToken.image  ); }
 |<ELSE :"else"> 
{ debugStream.println("ELSE token:" + matchedToken.image  ); }
 |<IMPORT :"import"> 
{ debugStream.println("IMPORT token:" + matchedToken.image  ); }
 |<PUBLIC :"public"> 
{ debugStream.println("PUBLIC token:" + matchedToken.image  ); }
 |<THROWS :"throws"> 
{ debugStream.println("THROWS token:" + matchedToken.image  ); }
 |<BYTE :"byte"> 
{ debugStream.println("BYTE token:" + matchedToken.image  ); }
 |<ENUM :"enum"> 
{ debugStream.println("ENUM token:" + matchedToken.image  ); }
 |<INSTANCEOF :"instanceof"> 
{ debugStream.println("INSTANCEOF token:" + matchedToken.image  ); }
 |<RETURN :"return"> 
{ debugStream.println("RETURN token:" + matchedToken.image  ); }
 |<TRANSIENT :"transient"> 
{ debugStream.println("TRANSIENT token:" + matchedToken.image  ); }
 |<CASE :"case"> 
{ debugStream.println("CASE token:" + matchedToken.image  ); }
 |<EXTENDS :"extends"> 
{ debugStream.println("EXTENDS token:" + matchedToken.image  ); }
 |<INT :"int"> 
{ debugStream.println("INT token:" + matchedToken.image  ); }
 |<SHORT :"short"> 
{ debugStream.println("SHORT token:" + matchedToken.image  ); }
 |<TRUE :"true"> 
{ debugStream.println("TRUE token:" + matchedToken.image  ); }
 |<CATCH :"catch"> 
{ debugStream.println("CATCH token:" + matchedToken.image  ); }
 |<FALSE :"false"> 
{ debugStream.println("FALSE token:" + matchedToken.image  ); }
 |<INTERFACE :"interface"> 
{ debugStream.println("INTERFACE token:" + matchedToken.image  ); }
 |<STATIC :"static"> 
{ debugStream.println("STATIC token:" + matchedToken.image  ); }
 |<TRY :"try"> 
{ debugStream.println("TRY token:" + matchedToken.image  ); }
 |<CHAR :"char"> 
{ debugStream.println("CHAR token:" + matchedToken.image  ); }
 |<FINAL :"final"> 
{ debugStream.println("FINAL token:" + matchedToken.image  ); }
 |<LONG :"long"> 
{ debugStream.println("LONG token:" + matchedToken.image  ); }
 |<STRICTFP :"strictfp"> 
{ debugStream.println("STRICTFP token:" + matchedToken.image  ); }
 |<VOID :"void"> 
{ debugStream.println("VOID token:" + matchedToken.image  ); }
 |<CLASS :"class"> 
{ debugStream.println("CLASS token:" + matchedToken.image  ); }
 |<FINALLY :"finally"> 
{ debugStream.println("FINALLY token:" + matchedToken.image  ); }
 |<NATIVE :"native"> 
{ debugStream.println("NATIVE token:" + matchedToken.image  ); }
 |<SUPER :"super"> 
{ debugStream.println("SUPER token:" + matchedToken.image  ); }
 |<VOLATILE :"volatile"> 
{ debugStream.println("VOLATILE token:" + matchedToken.image  ); }
 |<CONST :"const"> 
{ debugStream.println("CONST token:" + matchedToken.image  ); }
 |<FLOAT :"float"> 
{ debugStream.println("FLOAT token:" + matchedToken.image  ); }
 |<NEW :"new"> 
{ debugStream.println("NEW token:" + matchedToken.image  ); }
 |<SWITCH :"switch"> 
{ debugStream.println("SWITCH token:" + matchedToken.image  ); }
 |<WHILE :"while"> 
{ debugStream.println("WHILE token:" + matchedToken.image  ); }
 |<CONTINUE :"continue"> 
{ debugStream.println("CONTINUE token:" + matchedToken.image  ); }
 |<FOR :"for"> 
{ debugStream.println("FOR token:" + matchedToken.image  ); }
 | <IDENTIFIER : <LETTER> (<LETTER> | <DIGIT> )*>
      { debugStream.println("IDENTIFIER token: " + matchedToken.image); }
| <DECIMALINTEGER : <NONZERO> (<DIGIT> )*>
      { debugStream.println("DECIMAL INTEGER token: " + matchedToken.image); }
| <OCTALINTEGER : <ZERO>(<OCTALS> )*>
      { debugStream.println("OCTAL INTEGER token: " + matchedToken.image); }
| <HEXINTEGER : "0"("x"|"X")(<DIGIT>|<HEXLETTERS>)(<DIGIT>|<HEXLETTERS> )*>
      { debugStream.println("HEXADECIMAL INTEGER token: " + matchedToken.image); }
|<#HEXLETTERS:["A"-"F"]["a"-"f"]>
  | <#DIGIT  : ["0"-"9"]>
| <#NONZERO  : ["1"-"9"]>
  | <#LETTER : ["a"-"z"]["A"-"Z"]["_"]>
   |<#OCTALS: ["0"-"7"]>
| <#ZERO : ["0"]>


}