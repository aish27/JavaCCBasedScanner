/* Generated By:JavaCC: Do not edit this line. HelloWorldConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HelloWorldConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IGNORE = 1;
  /** RegularExpression Id. */
  int ABSTRACT = 2;
  /** RegularExpression Id. */
  int DEFAULTKEYWORD = 3;
  /** RegularExpression Id. */
  int GOTO = 4;
  /** RegularExpression Id. */
  int PACKAGE = 5;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 6;
  /** RegularExpression Id. */
  int ASSERT = 7;
  /** RegularExpression Id. */
  int DO = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int PRIVATE = 10;
  /** RegularExpression Id. */
  int THIS = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int DOUBLE = 13;
  /** RegularExpression Id. */
  int IMPLEMENTS = 14;
  /** RegularExpression Id. */
  int PROTECTED = 15;
  /** RegularExpression Id. */
  int THROW = 16;
  /** RegularExpression Id. */
  int BREAK = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int IMPORT = 19;
  /** RegularExpression Id. */
  int PUBLIC = 20;
  /** RegularExpression Id. */
  int THROWS = 21;
  /** RegularExpression Id. */
  int BYTE = 22;
  /** RegularExpression Id. */
  int ENUM = 23;
  /** RegularExpression Id. */
  int INSTANCEOF = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int TRANSIENT = 26;
  /** RegularExpression Id. */
  int CASE = 27;
  /** RegularExpression Id. */
  int EXTENDS = 28;
  /** RegularExpression Id. */
  int INT = 29;
  /** RegularExpression Id. */
  int SHORT = 30;
  /** RegularExpression Id. */
  int TRUE = 31;
  /** RegularExpression Id. */
  int CATCH = 32;
  /** RegularExpression Id. */
  int FALSE = 33;
  /** RegularExpression Id. */
  int INTERFACE = 34;
  /** RegularExpression Id. */
  int STATIC = 35;
  /** RegularExpression Id. */
  int TRY = 36;
  /** RegularExpression Id. */
  int CHAR = 37;
  /** RegularExpression Id. */
  int FINAL = 38;
  /** RegularExpression Id. */
  int LONG = 39;
  /** RegularExpression Id. */
  int STRICTFP = 40;
  /** RegularExpression Id. */
  int VOID = 41;
  /** RegularExpression Id. */
  int CLASS = 42;
  /** RegularExpression Id. */
  int FINALLY = 43;
  /** RegularExpression Id. */
  int NATIVE = 44;
  /** RegularExpression Id. */
  int SUPER = 45;
  /** RegularExpression Id. */
  int VOLATILE = 46;
  /** RegularExpression Id. */
  int CONST = 47;
  /** RegularExpression Id. */
  int FLOAT = 48;
  /** RegularExpression Id. */
  int NEW = 49;
  /** RegularExpression Id. */
  int SWITCH = 50;
  /** RegularExpression Id. */
  int WHILE = 51;
  /** RegularExpression Id. */
  int CONTINUE = 52;
  /** RegularExpression Id. */
  int FOR = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int DECIMALINTEGER = 55;
  /** RegularExpression Id. */
  int OCTALINTEGER = 56;
  /** RegularExpression Id. */
  int HEXINTEGER = 57;
  /** RegularExpression Id. */
  int HEXLETTERS = 58;
  /** RegularExpression Id. */
  int DIGIT = 59;
  /** RegularExpression Id. */
  int NONZERO = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int OCTALS = 62;
  /** RegularExpression Id. */
  int ZERO = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<IGNORE>",
    "\"abstract\"",
    "\"default\"",
    "\"goto\"",
    "\"package\"",
    "\"synchronized\"",
    "\"assert\"",
    "\"do\"",
    "\"if\"",
    "\"private\"",
    "\"this\"",
    "\"boolean\"",
    "\"double\"",
    "\"implements\"",
    "\"protected\"",
    "\"throw\"",
    "\"break\"",
    "\"else\"",
    "\"import\"",
    "\"public\"",
    "\"throws\"",
    "\"byte\"",
    "\"enum\"",
    "\"instanceof\"",
    "\"return\"",
    "\"transient\"",
    "\"case\"",
    "\"extends\"",
    "\"int\"",
    "\"short\"",
    "\"true\"",
    "\"catch\"",
    "\"false\"",
    "\"interface\"",
    "\"static\"",
    "\"try\"",
    "\"char\"",
    "\"final\"",
    "\"long\"",
    "\"strictfp\"",
    "\"void\"",
    "\"class\"",
    "\"finally\"",
    "\"native\"",
    "\"super\"",
    "\"volatile\"",
    "\"const\"",
    "\"float\"",
    "\"new\"",
    "\"switch\"",
    "\"while\"",
    "\"continue\"",
    "\"for\"",
    "<IDENTIFIER>",
    "<DECIMALINTEGER>",
    "<OCTALINTEGER>",
    "<HEXINTEGER>",
    "<HEXLETTERS>",
    "<DIGIT>",
    "<NONZERO>",
    "<LETTER>",
    "<OCTALS>",
    "<ZERO>",
  };

}
