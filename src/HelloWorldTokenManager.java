/* Generated By:JavaCC: Do not edit this line. HelloWorldTokenManager.java */

/** Token Manager. */
public class HelloWorldTokenManager implements HelloWorldConstants
{
    public static void main(String[] args)
    {
        java.io.StringReader sr = new java.io.StringReader(args[0]);
        SimpleCharStream scs = new SimpleCharStream(sr);
        HelloWorldTokenManager mgr = new HelloWorldTokenManager(scs);

        while (mgr.getNextToken().kind != EOF) {}
    }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffffffff78L) != 0L)
            return 10;
         if ((active0 & 0x80L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x3ffffffffffff8L) != 0L)
            return 11;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x421000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10842108000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2108L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10840000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x21084200000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x421084200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2100000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x108420L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4210840000040L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1084210800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x420000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100308000020L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000002000008L);
      case 70:
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 11);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002040210800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000040000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x421800000L);
      case 79:
      case 111:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x30c28000003010L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1084028400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000100000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400040L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x42804000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc020000000c00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1088c000000040L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040009000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000084000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000210000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x9040080L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100512400010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80802000L);
      case 87:
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 49);
         break;
      case 89:
      case 121:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1484000020008L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000040L);
      case 68:
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(3, 41);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(3, 22);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(3, 27);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x200410000080L);
      case 71:
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000105000L);
      case 77:
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(3, 23);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 79:
      case 111:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x290000L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 83:
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x840200000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x14000801008000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000420L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4010000000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(4, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0xd000L);
      case 72:
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000800100000L);
      case 75:
      case 107:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         break;
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000002000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(4, 45);
         return jjMoveStringLiteralDfa5_0(active0, 0x402080080L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 87:
      case 119:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 67:
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(5, 20);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      case 72:
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400004000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000008L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000001000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000400L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(6, 5);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(6, 10);
         return jjMoveStringLiteralDfa7_0(active0, 0x4004000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 28);
         break;
      case 84:
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(6, 3);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 89:
      case 121:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(6, 43);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(7, 46);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(7, 52);
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4004040L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 70:
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(9, 24);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(9, 14);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 10;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 11;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(11, 6);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(16);
                  }
                  else if ((0x100100000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddTwoStates(18, 19);
                  }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjAddStates(0, 1);
                  break;
               case 15:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar != 48)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(18);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(11);
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x10000000100000L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 9:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if (curChar != 95)
                     break;
                  kind = 54;
                  jjAddStates(0, 1);
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 19:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 23);
                  break;
               case 21:
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static final int[] jjnextStates = {
   12, 14, 20, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3fffffffffffffdL, 0x0L, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[24];
static private final int[] jjstateSet = new int[48];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public HelloWorldTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public HelloWorldTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 24; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      debugStream.println("Returning the <EOF> token.");
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
      {
         debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
         input_stream.backup(curPos - jjmatchedPos - 1);
      }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 1, 9, 15, 17, },
   { 0, 1, 9, 15, 17, },
   { 2, 10, },
   { 3 },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 0, 1, 9, 15, 17, },
   { 2, 10, },
   { 11 },
   { 12 },
   { 13 },
   { 14 },
   { 0, 1, 9, 15, 17, },
   { 16 },
   { 0, 1, 9, 15, 17, },
   { 18 },
   { 19 },
   { 20 },
   { 21 },
   { 22 },
   { 23 },
 },

};
protected static final int[][] kindForState = {
{ 1, 2, 2, 2, 2, 2, 2, 2, 2, 54, 54, 54, 54, 54,
  54, 55, 55, 56, 56, 57, 57, 57, 57, 57}
};
  static  int kindCnt = 0;
  protected static  final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }

  protected static  final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[64];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }

static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD ABSTRACT token:" + matchedToken.image  );
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD DEFAULT token:" + matchedToken.image  );
         break;
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD GOTO token:" + matchedToken.image  );
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD PACKAGE token:" + matchedToken.image  );
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD SYNCHRONIZED token:" + matchedToken.image  );
         break;
      case 7 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD ASSERT token:" + matchedToken.image  );
         break;
      case 8 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD DO token:" + matchedToken.image  );
         break;
      case 9 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD IF token:" + matchedToken.image  );
         break;
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD PRIVATE token:" + matchedToken.image  );
         break;
      case 11 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD THIS token:" + matchedToken.image  );
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD BOOLEAN token:" + matchedToken.image  );
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD DOUBLE token:" + matchedToken.image  );
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD IMPLEMENTS token:" + matchedToken.image  );
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD PROTECTED token:" + matchedToken.image  );
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD THROW token:" + matchedToken.image  );
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD BREAK token:" + matchedToken.image  );
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD ELSE token:" + matchedToken.image  );
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD IMPORT token:" + matchedToken.image  );
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD PUBLIC token:" + matchedToken.image  );
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD THROWS token:" + matchedToken.image  );
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD BYTE token:" + matchedToken.image  );
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD ENUM token:" + matchedToken.image  );
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD INSTANCEOF token:" + matchedToken.image  );
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD RETURN token:" + matchedToken.image  );
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD TRANSIENT token:" + matchedToken.image  );
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CASE token:" + matchedToken.image  );
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD EXTENDS token:" + matchedToken.image  );
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD INT token:" + matchedToken.image  );
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD SHORT token:" + matchedToken.image  );
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD TRUE token:" + matchedToken.image  );
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CATCH token:" + matchedToken.image  );
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD FALSE token:" + matchedToken.image  );
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD INTERFACE token:" + matchedToken.image  );
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD STATIC token:" + matchedToken.image  );
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD TRY token:" + matchedToken.image  );
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CHAR token:" + matchedToken.image  );
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD FINAL token:" + matchedToken.image  );
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD LONG token:" + matchedToken.image  );
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD STRICTFP token:" + matchedToken.image  );
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD VOID token:" + matchedToken.image  );
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CLASS token:" + matchedToken.image  );
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD FINALLY token:" + matchedToken.image  );
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD NATIVE token:" + matchedToken.image  );
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD SUPER token:" + matchedToken.image  );
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD VOLATILE token:" + matchedToken.image  );
         break;
      case 47 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CONST token:" + matchedToken.image  );
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD FLOAT token:" + matchedToken.image  );
         break;
      case 49 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD NEW token:" + matchedToken.image  );
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD SWITCH token:" + matchedToken.image  );
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD WHILE token:" + matchedToken.image  );
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD CONTINUE token:" + matchedToken.image  );
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
  debugStream.println("RESERVEDWORD FOR token:" + matchedToken.image  );
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("IDENTIFIER token: " + matchedToken.image);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("DECIMAL INTEGER token: " + matchedToken.image);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("OCTAL INTEGER token: " + matchedToken.image);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        debugStream.println("HEXADECIMAL INTEGER token: " + matchedToken.image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
